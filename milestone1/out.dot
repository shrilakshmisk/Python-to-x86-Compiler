digraph G {
node [ordering=out]
0 [label="NAME(self)"]
1 [label="parameters"]
2 [label="NONE(None)"]
3 [label="NAME(self)"]
4 [label="trailer"]
5 [label="NAME(numbers)"]
6 [label="atom_expr"]
7 [label="NAME(list)"]
8 [label="NAME(int)"]
9 [label="trailer"]
10 [label="atom_expr"]
11 [label="atom"]
12 [label="EQUAL(=)"]
13 [label="funcdef"]
14 [label="NAME(__init__)"]
15 [label="NAME(self)"]
16 [label="NAME(int)"]
17 [label="arg"]
18 [label="NAME(number)"]
19 [label="typedargslist"]
20 [label="parameters"]
21 [label="NONE(None)"]
22 [label="STRING(\"\"\"Add a number to the list.\"\"\")"]
23 [label="NAME(self)"]
24 [label="trailer"]
25 [label="NAME(numbers)"]
26 [label="trailer"]
27 [label="NAME(append)"]
28 [label="NAME(number)"]
29 [label="trailer"]
30 [label="Multi_trailer"]
31 [label="Multi_trailer"]
32 [label="atom_expr"]
33 [label="stmts"]
34 [label="funcdef"]
35 [label="NAME(add_number)"]
36 [label="NAME(self)"]
37 [label="parameters"]
38 [label="NAME(int)"]
39 [label="STRING(\"\"\"Calculate the average of numbers in the list.\"\"\")"]
40 [label="NAME(self)"]
41 [label="trailer"]
42 [label="NAME(numbers)"]
43 [label="atom_expr"]
44 [label="NOT(not)"]
45 [label="NUMBER(0)"]
46 [label="flow_stmt"]
47 [label="RETURN(return)"]
48 [label="if_stmt"]
49 [label="NAME(sum)"]
50 [label="NAME(self)"]
51 [label="trailer"]
52 [label="NAME(numbers)"]
53 [label="atom_expr"]
54 [label="trailer"]
55 [label="atom_expr"]
56 [label="NAME(len)"]
57 [label="NAME(self)"]
58 [label="trailer"]
59 [label="NAME(numbers)"]
60 [label="atom_expr"]
61 [label="trailer"]
62 [label="atom_expr"]
63 [label="SLASH(/)"]
64 [label="flow_stmt"]
65 [label="RETURN(return)"]
66 [label="stmts"]
67 [label="stmts"]
68 [label="funcdef"]
69 [label="NAME(average)"]
70 [label="stmts"]
71 [label="stmts"]
72 [label="classdef"]
73 [label="NAME(NumberListManager)"]
74 [label="NAME(self)"]
75 [label="NAME(int)"]
76 [label="arg"]
77 [label="NAME(n)"]
78 [label="typedargslist"]
79 [label="parameters"]
80 [label="NAME(int)"]
81 [label="STRING(\"\"\"Calculate the factorial of a number using a for loop.\"\"\")"]
82 [label="NAME(n)"]
83 [label="LESSER(<)"]
84 [label="NUMBER(0)"]
85 [label="STRING(\"Factorial does not exist for negative numbers\")"]
86 [label="flow_stmt"]
87 [label="RETURN(return)"]
88 [label="NAME(n)"]
89 [label="DOUBLE_EQUAL(==)"]
90 [label="NUMBER(0)"]
91 [label="NUMBER(1)"]
92 [label="flow_stmt"]
93 [label="RETURN(return)"]
94 [label="Multi_elif"]
95 [label="NAME(factorial)"]
96 [label="NUMBER(1)"]
97 [label="EQUAL(=)"]
98 [label="NAME(i)"]
99 [label="NAME(range)"]
100 [label="NUMBER(1)"]
101 [label="NAME(n)"]
102 [label="NUMBER(1)"]
103 [label="PLUS(+)"]
104 [label="arglist"]
105 [label="trailer"]
106 [label="atom_expr"]
107 [label="NAME(factorial)"]
108 [label="STAR_EQUAL(*=)"]
109 [label="NAME(i)"]
110 [label="for_stmt"]
111 [label="NAME(factorial)"]
112 [label="flow_stmt"]
113 [label="RETURN(return)"]
114 [label="stmts"]
115 [label="stmts"]
116 [label="if_stmt"]
117 [label="stmts"]
118 [label="funcdef"]
119 [label="NAME(factorial)"]
120 [label="NAME(self)"]
121 [label="NAME(int)"]
122 [label="arg"]
123 [label="NAME(start)"]
124 [label="NAME(int)"]
125 [label="arg"]
126 [label="NAME(end)"]
127 [label="argslist"]
128 [label="typedargslist"]
129 [label="parameters"]
130 [label="NAME(list)"]
131 [label="NAME(int)"]
132 [label="trailer"]
133 [label="atom_expr"]
134 [label="STRING(\"\"\"Find all prime
        numbers within a range using nested loops.\"\"\")"]
135 [label="NAME(primes)"]
136 [label="NAME(list)"]
137 [label="NAME(int)"]
138 [label="trailer"]
139 [label="atom_expr"]
140 [label="atom"]
141 [label="EQUAL(=)"]
142 [label="NAME(num)"]
143 [label="NAME(int)"]
144 [label="NUMBER(0)"]
145 [label="EQUAL(=)"]
146 [label="NAME(num)"]
147 [label="NAME(range)"]
148 [label="NAME(start)"]
149 [label="NAME(end)"]
150 [label="NUMBER(1)"]
151 [label="PLUS(+)"]
152 [label="arglist"]
153 [label="trailer"]
154 [label="atom_expr"]
155 [label="NAME(num)"]
156 [label="GREATER(>)"]
157 [label="NUMBER(1)"]
158 [label="NAME(i)"]
159 [label="NAME(int)"]
160 [label="NUMBER(0)"]
161 [label="EQUAL(=)"]
162 [label="NAME(i)"]
163 [label="NAME(range)"]
164 [label="NUMBER(2)"]
165 [label="NAME(num)"]
166 [label="arglist"]
167 [label="trailer"]
168 [label="atom_expr"]
169 [label="NAME(num)"]
170 [label="NAME(i)"]
171 [label="PERCENTAGE(%)"]
172 [label="atom"]
173 [label="DOUBLE_EQUAL(==)"]
174 [label="NUMBER(0)"]
175 [label="BREAK(break)"]
176 [label="if_stmt"]
177 [label="NAME(primes)"]
178 [label="trailer"]
179 [label="NAME(append)"]
180 [label="NAME(num)"]
181 [label="trailer"]
182 [label="Multi_trailer"]
183 [label="atom_expr"]
184 [label="for_stmt"]
185 [label="stmts"]
186 [label="if_stmt"]
187 [label="for_stmt"]
188 [label="NAME(primes)"]
189 [label="flow_stmt"]
190 [label="RETURN(return)"]
191 [label="stmts"]
192 [label="stmts"]
193 [label="stmts"]
194 [label="stmts"]
195 [label="funcdef"]
196 [label="NAME(find_primes)"]
197 [label="NAME(self)"]
198 [label="NAME(int)"]
199 [label="arg"]
200 [label="NAME(start)"]
201 [label="typedargslist"]
202 [label="parameters"]
203 [label="NONE(None)"]
204 [label="STRING(\"\"\"Perform a countdown using a while loop.\"\"\")"]
205 [label="NAME(start)"]
206 [label="GREATER(>)"]
207 [label="NUMBER(0)"]
208 [label="NAME(print)"]
209 [label="STRING(\"Counting down\")"]
210 [label="trailer"]
211 [label="atom_expr"]
212 [label="NAME(start)"]
213 [label="MINUS_EQUAL(-=)"]
214 [label="NUMBER(1)"]
215 [label="stmts"]
216 [label="while_stmt"]
217 [label="NAME(print)"]
218 [label="STRING(\"Liftoff!\")"]
219 [label="trailer"]
220 [label="atom_expr"]
221 [label="stmts"]
222 [label="stmts"]
223 [label="funcdef"]
224 [label="NAME(countdown)"]
225 [label="stmts"]
226 [label="stmts"]
227 [label="classdef"]
228 [label="NAME(LoopOperations)"]
229 [label="NAME(int)"]
230 [label="arg"]
231 [label="NAME(n)"]
232 [label="parameters"]
233 [label="NAME(int)"]
234 [label="STRING(\"\"\"Multiply a given number by two.\"\"\")"]
235 [label="STRING(\"bhvjhbj\
            jnjbnmnmnnmmmm\")"]
236 [label="STRING('''kjsknksmm
    kjksmkxkmkmx''')"]
237 [label="NAME(n)"]
238 [label="NUMBER(2)"]
239 [label="STAR(*)"]
240 [label="flow_stmt"]
241 [label="RETURN(return)"]
242 [label="stmts"]
243 [label="stmts"]
244 [label="stmts"]
245 [label="funcdef"]
246 [label="NAME(multiply_by_two)"]
247 [label="NAME(int)"]
248 [label="arg"]
249 [label="NAME(a)"]
250 [label="NAME(int)"]
251 [label="arg"]
252 [label="NAME(b)"]
253 [label="NAME(int)"]
254 [label="arg"]
255 [label="NAME(c)"]
256 [label="NAME(int)"]
257 [label="arg"]
258 [label="NAME(d)"]
259 [label="argslist"]
260 [label="argslist"]
261 [label="typedargslist"]
262 [label="parameters"]
263 [label="NAME(int)"]
264 [label="NUMBER(1)"]
265 [label="flow_stmt"]
266 [label="RETURN(return)"]
267 [label="funcdef"]
268 [label="NAME(func)"]
269 [label="NAME(int)"]
270 [label="arg"]
271 [label="NAME(a)"]
272 [label="parameters"]
273 [label="NAME(int)"]
274 [label="NUMBER(1)"]
275 [label="flow_stmt"]
276 [label="RETURN(return)"]
277 [label="funcdef"]
278 [label="NAME(funb)"]
279 [label="NAME(n)"]
280 [label="NAME(int)"]
281 [label="NUMBER(1)"]
282 [label="EQUAL(=)"]
283 [label="NAME(s)"]
284 [label="NAME(int)"]
285 [label="NUMBER(1)"]
286 [label="MINUS(-)"]
287 [label="EQUAL(=)"]
288 [label="NAME(p)"]
289 [label="NAME(int)"]
290 [label="NUMBER(2)"]
291 [label="MINUS(-)"]
292 [label="EQUAL(=)"]
293 [label="NAME(q)"]
294 [label="NAME(int)"]
295 [label="NUMBER(2)"]
296 [label="EQUAL(=)"]
297 [label="NAME(a)"]
298 [label="NAME(int)"]
299 [label="NUMBER(1)"]
300 [label="EQUAL(=)"]
301 [label="NAME(numbers_list)"]
302 [label="NAME(list)"]
303 [label="NAME(int)"]
304 [label="trailer"]
305 [label="atom_expr"]
306 [label="NUMBER(10)"]
307 [label="NUMBER(20)"]
308 [label="NUMBER(30)"]
309 [label="NUMBER(40)"]
310 [label="Multi_test"]
311 [label="Multi_test"]
312 [label="testlist"]
313 [label="atom"]
314 [label="EQUAL(=)"]
315 [label="NAME(results)"]
316 [label="NAME(list)"]
317 [label="NAME(int)"]
318 [label="trailer"]
319 [label="atom_expr"]
320 [label="NAME(multiply_by_two)"]
321 [label="NAME(n)"]
322 [label="trailer"]
323 [label="atom_expr"]
324 [label="NAME(func)"]
325 [label="NAME(q)"]
326 [label="NAME(p)"]
327 [label="NAME(s)"]
328 [label="STRING(\"kkmbj\")"]
329 [label="Multi_argument"]
330 [label="Multi_argument"]
331 [label="arglist"]
332 [label="trailer"]
333 [label="atom_expr"]
334 [label="NAME(a)"]
335 [label="NAME(funb)"]
336 [label="STRING(\"jhjKj\")"]
337 [label="trailer"]
338 [label="atom_expr"]
339 [label="Multi_test"]
340 [label="Multi_test"]
341 [label="testlist"]
342 [label="atom"]
343 [label="EQUAL(=)"]
344 [label="NAME(manager)"]
345 [label="NAME(NumberListManager)"]
346 [label="NAME(NumberListManager)"]
347 [label="trailer"]
348 [label="atom_expr"]
349 [label="EQUAL(=)"]
350 [label="NAME(number)"]
351 [label="NAME(int)"]
352 [label="NUMBER(0)"]
353 [label="EQUAL(=)"]
354 [label="NAME(number)"]
355 [label="NAME(numbers_list)"]
356 [label="NAME(manager)"]
357 [label="trailer"]
358 [label="NAME(add_number)"]
359 [label="NAME(number)"]
360 [label="trailer"]
361 [label="Multi_trailer"]
362 [label="atom_expr"]
363 [label="for_stmt"]
364 [label="NAME(print)"]
365 [label="STRING(\"Original numbers:\")"]
366 [label="NAME(numbers_list)"]
367 [label="arglist"]
368 [label="trailer"]
369 [label="atom_expr"]
370 [label="NAME(print)"]
371 [label="STRING(\"Numbers multiplied by two:\")"]
372 [label="NAME(results)"]
373 [label="arglist"]
374 [label="trailer"]
375 [label="atom_expr"]
376 [label="NAME(print)"]
377 [label="STRING(\"Average of numbers in manager:\")"]
378 [label="NAME(manager)"]
379 [label="trailer"]
380 [label="NAME(average)"]
381 [label="trailer"]
382 [label="Multi_trailer"]
383 [label="atom_expr"]
384 [label="arglist"]
385 [label="trailer"]
386 [label="atom_expr"]
387 [label="stmts"]
388 [label="stmts"]
389 [label="stmts"]
390 [label="stmts"]
391 [label="stmts"]
392 [label="stmts"]
393 [label="stmts"]
394 [label="stmts"]
395 [label="stmts"]
396 [label="stmts"]
397 [label="stmts"]
398 [label="stmts"]
399 [label="funcdef"]
400 [label="NAME(main)"]
401 [label="NAME(__name__)"]
402 [label="DOUBLE_EQUAL(==)"]
403 [label="STRING(\"__main__\")"]
404 [label="NAME(main)"]
405 [label="trailer"]
406 [label="atom_expr"]
407 [label="if_stmt"]
408 [label="file_input"]
409 [label="file_input"]
410 [label="file_input"]
411 [label="file_input"]
412 [label="file_input"]
413 [label="file_input"]
414 [label="unit"]
1 -> 0 [label="( )"]
4 -> 5 [label="."]
6 -> 3 
6 -> 4 
9 -> 8 [label="[ ]"]
10 -> 7 
10 -> 9 
12 -> 6 
12 -> 10 [label="type"]
12 -> 11 
13 -> 14 [label="def"]
13 -> 1 
13 -> 2 [label="return type"]
13 -> 12 [label="function body"]
17 -> 18 
17 -> 16 [label="parameter type"]
19 -> 15 
19 -> 17 
20 -> 19 [label="( )"]
24 -> 25 [label="."]
26 -> 27 [label="."]
29 -> 28 [label="( )"]
30 -> 26 
30 -> 29 
31 -> 24 
31 -> 30 
32 -> 23 
32 -> 31 
33 -> 22 
33 -> 32 
34 -> 35 [label="def"]
34 -> 20 
34 -> 21 [label="return type"]
34 -> 33 [label="function body"]
37 -> 36 [label="( )"]
41 -> 42 [label="."]
43 -> 40 
43 -> 41 
44 -> 43 
46 -> 47 
46 -> 45 
48 -> 44 [label="if"]
48 -> 46 [label="then"]
51 -> 52 [label="."]
53 -> 50 
53 -> 51 
54 -> 53 [label="( )"]
55 -> 49 
55 -> 54 
58 -> 59 [label="."]
60 -> 57 
60 -> 58 
61 -> 60 [label="( )"]
62 -> 56 
62 -> 61 
63 -> 55 
63 -> 62 
64 -> 65 
64 -> 63 
66 -> 48 
66 -> 64 
67 -> 39 
67 -> 66 
68 -> 69 [label="def"]
68 -> 37 
68 -> 38 [label="return type"]
68 -> 67 [label="function body"]
70 -> 34 
70 -> 68 
71 -> 13 
71 -> 70 
72 -> 73 [label="class"]
72 -> 71 [label="class body"]
76 -> 77 
76 -> 75 [label="parameter type"]
78 -> 74 
78 -> 76 
79 -> 78 [label="( )"]
83 -> 82 
83 -> 84 
86 -> 87 
86 -> 85 
89 -> 88 
89 -> 90 
92 -> 93 
92 -> 91 
94 -> 89 [label="elif"]
94 -> 92 [label="then"]
97 -> 95 
97 -> 96 
103 -> 101 
103 -> 102 
104 -> 100 
104 -> 103 
105 -> 104 [label="( )"]
106 -> 99 
106 -> 105 
108 -> 107 
108 -> 109 
110 -> 98 [label="for"]
110 -> 106 [label="in"]
110 -> 108 [label="body"]
112 -> 113 
112 -> 111 
114 -> 110 
114 -> 112 
115 -> 97 
115 -> 114 
116 -> 83 [label="if"]
116 -> 86 [label="then"]
116 -> 94 
116 -> 115 [label="else"]
117 -> 81 
117 -> 116 
118 -> 119 [label="def"]
118 -> 79 
118 -> 80 [label="return type"]
118 -> 117 [label="function body"]
122 -> 123 
122 -> 121 [label="parameter type"]
125 -> 126 
125 -> 124 [label="parameter type"]
127 -> 122 
127 -> 125 
128 -> 120 
128 -> 127 
129 -> 128 [label="( )"]
132 -> 131 [label="[ ]"]
133 -> 130 
133 -> 132 
138 -> 137 [label="[ ]"]
139 -> 136 
139 -> 138 
141 -> 135 
141 -> 139 [label="type"]
141 -> 140 
145 -> 142 
145 -> 143 [label="type"]
145 -> 144 
151 -> 149 
151 -> 150 
152 -> 148 
152 -> 151 
153 -> 152 [label="( )"]
154 -> 147 
154 -> 153 
156 -> 155 
156 -> 157 
161 -> 158 
161 -> 159 [label="type"]
161 -> 160 
166 -> 164 
166 -> 165 
167 -> 166 [label="( )"]
168 -> 163 
168 -> 167 
171 -> 169 
171 -> 170 
172 -> 171 [label="( )"]
173 -> 172 
173 -> 174 
176 -> 173 [label="if"]
176 -> 175 [label="then"]
178 -> 179 [label="."]
181 -> 180 [label="( )"]
182 -> 178 
182 -> 181 
183 -> 177 
183 -> 182 
184 -> 162 [label="for"]
184 -> 168 [label="in"]
184 -> 176 [label="body"]
184 -> 183 
185 -> 161 
185 -> 184 
186 -> 156 [label="if"]
186 -> 185 [label="then"]
187 -> 146 [label="for"]
187 -> 154 [label="in"]
187 -> 186 [label="body"]
189 -> 190 
189 -> 188 
191 -> 187 
191 -> 189 
192 -> 145 
192 -> 191 
193 -> 141 
193 -> 192 
194 -> 134 
194 -> 193 
195 -> 196 [label="def"]
195 -> 129 
195 -> 133 [label="return type"]
195 -> 194 [label="function body"]
199 -> 200 
199 -> 198 [label="parameter type"]
201 -> 197 
201 -> 199 
202 -> 201 [label="( )"]
206 -> 205 
206 -> 207 
210 -> 209 [label="( )"]
211 -> 208 
211 -> 210 
213 -> 212 
213 -> 214 
215 -> 211 
215 -> 213 
216 -> 206 [label="while"]
216 -> 215 [label="body"]
219 -> 218 [label="( )"]
220 -> 217 
220 -> 219 
221 -> 216 
221 -> 220 
222 -> 204 
222 -> 221 
223 -> 224 [label="def"]
223 -> 202 
223 -> 203 [label="return type"]
223 -> 222 [label="function body"]
225 -> 195 
225 -> 223 
226 -> 118 
226 -> 225 
227 -> 228 [label="class"]
227 -> 226 [label="class body"]
230 -> 231 
230 -> 229 [label="parameter type"]
232 -> 230 [label="( )"]
239 -> 237 
239 -> 238 
240 -> 241 
240 -> 239 
242 -> 236 
242 -> 240 
243 -> 235 
243 -> 242 
244 -> 234 
244 -> 243 
245 -> 246 [label="def"]
245 -> 232 
245 -> 233 [label="return type"]
245 -> 244 [label="function body"]
248 -> 249 
248 -> 247 [label="parameter type"]
251 -> 252 
251 -> 250 [label="parameter type"]
254 -> 255 
254 -> 253 [label="parameter type"]
257 -> 258 
257 -> 256 [label="parameter type"]
259 -> 254 
259 -> 257 
260 -> 251 
260 -> 259 
261 -> 248 
261 -> 260 
262 -> 261 [label="( )"]
265 -> 266 
265 -> 264 
267 -> 268 [label="def"]
267 -> 262 
267 -> 263 [label="return type"]
267 -> 265 [label="function body"]
270 -> 271 
270 -> 269 [label="parameter type"]
272 -> 270 [label="( )"]
275 -> 276 
275 -> 274 
277 -> 278 [label="def"]
277 -> 272 
277 -> 273 [label="return type"]
277 -> 275 [label="function body"]
282 -> 279 
282 -> 280 [label="type"]
282 -> 281 
286 -> 285 
287 -> 283 
287 -> 284 [label="type"]
287 -> 286 
291 -> 290 
292 -> 288 
292 -> 289 [label="type"]
292 -> 291 
296 -> 293 
296 -> 294 [label="type"]
296 -> 295 
300 -> 297 
300 -> 298 [label="type"]
300 -> 299 
304 -> 303 [label="[ ]"]
305 -> 302 
305 -> 304 
310 -> 308 
310 -> 309 
311 -> 307 
311 -> 310 
312 -> 306 
312 -> 311 
313 -> 312 [label="[ ]"]
314 -> 301 
314 -> 305 [label="type"]
314 -> 313 
318 -> 317 [label="[ ]"]
319 -> 316 
319 -> 318 
322 -> 321 [label="( )"]
323 -> 320 
323 -> 322 
329 -> 327 
329 -> 328 
330 -> 326 
330 -> 329 
331 -> 325 
331 -> 330 
332 -> 331 [label="( )"]
333 -> 324 
333 -> 332 
337 -> 336 [label="( )"]
338 -> 335 
338 -> 337 
339 -> 334 
339 -> 338 
340 -> 333 
340 -> 339 
341 -> 323 
341 -> 340 
342 -> 341 [label="[ ]"]
343 -> 315 
343 -> 319 [label="type"]
343 -> 342 
348 -> 346 
348 -> 347 
349 -> 344 
349 -> 345 [label="type"]
349 -> 348 
353 -> 350 
353 -> 351 [label="type"]
353 -> 352 
357 -> 358 [label="."]
360 -> 359 [label="( )"]
361 -> 357 
361 -> 360 
362 -> 356 
362 -> 361 
363 -> 354 [label="for"]
363 -> 355 [label="in"]
363 -> 362 [label="body"]
367 -> 365 
367 -> 366 
368 -> 367 [label="( )"]
369 -> 364 
369 -> 368 
373 -> 371 
373 -> 372 
374 -> 373 [label="( )"]
375 -> 370 
375 -> 374 
379 -> 380 [label="."]
382 -> 379 
382 -> 381 
383 -> 378 
383 -> 382 
384 -> 377 
384 -> 383 
385 -> 384 [label="( )"]
386 -> 376 
386 -> 385 
387 -> 375 
387 -> 386 
388 -> 369 
388 -> 387 
389 -> 363 
389 -> 388 
390 -> 353 
390 -> 389 
391 -> 349 
391 -> 390 
392 -> 343 
392 -> 391 
393 -> 314 
393 -> 392 
394 -> 300 
394 -> 393 
395 -> 296 
395 -> 394 
396 -> 292 
396 -> 395 
397 -> 287 
397 -> 396 
398 -> 282 
398 -> 397 
399 -> 400 [label="def"]
399 -> 398 [label="function body"]
402 -> 401 
402 -> 403 
406 -> 404 
406 -> 405 
407 -> 402 [label="if"]
407 -> 406 [label="then"]
408 -> 399 
408 -> 407 
409 -> 277 
409 -> 408 
410 -> 267 
410 -> 409 
411 -> 245 
411 -> 410 
412 -> 227 
412 -> 411 
413 -> 72 
413 -> 412 
414 -> 413 
}
